<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Data Structures and Algorithms in Kotlin</title>
    <link>//localhost:1313/docs/</link>
    <description>Recent content in Docs on Data Structures and Algorithms in Kotlin</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <atom:link href="//localhost:1313/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithms</title>
      <link>//localhost:1313/docs/algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/algorithms/</guid>
      <description>&lt;h2 id=&#34;what-are-algorithms&#34;&gt;&lt;strong&gt;What are Algorithms?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;According to Wikipedia,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In mathematics and computer science, an algorithm is a finite sequence of mathematically rigorous&lt;br&gt;&#xA;instructions, typically used to solve a class of specific problems or to perform a computation.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;In Simple words,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;An algorithm is a set of well-defined steps to solve a particular problem or perform a specific&lt;br&gt;&#xA;task.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;In other words,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;It&amp;rsquo;s the step-by-step procedure to solve a problem.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;But a good algorithm is more than just a set of steps. It&amp;rsquo;s about efficiency, correctness, and&lt;br&gt;&#xA;elegance. It&amp;rsquo;s about finding the best way to solve a problem, not just any way.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arrays</title>
      <link>//localhost:1313/docs/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/arrays/</guid>
      <description>&lt;h1 id=&#34;arrays-and-specialized-arrays-in-kotlin&#34;&gt;&lt;strong&gt;Arrays and Specialized Arrays in Kotlin&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-introduction&#34;&gt;&lt;strong&gt;1. Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Arrays are one of the most fundamental data structures in programming, allowing&lt;br&gt;&#xA;you to store and manipulate collections of elements. Kotlin provides a powerful&lt;br&gt;&#xA;and concise implementation of arrays, blending traditional array concepts with&lt;br&gt;&#xA;modern language features. Whether you&amp;rsquo;re working with fixed-size collections or&lt;br&gt;&#xA;need specialized types for performance, Kotlin&amp;rsquo;s array support has you covered.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we&amp;rsquo;ll explore Kotlin arrays and their specialized variants,&lt;br&gt;&#xA;examining their features, syntax, and best practices for effective usage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Complexity</title>
      <link>//localhost:1313/docs/complexity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/complexity/</guid>
      <description>&lt;h2 id=&#34;what-is-complexity&#34;&gt;&lt;strong&gt;What is Complexity?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;In computer science, &lt;strong&gt;complexity&lt;/strong&gt; refers to the performance characteristics of algorithms, such as&lt;br&gt;&#xA;how much time or space they require to solve a problem. Complexity analysis helps in understanding&lt;br&gt;&#xA;the efficiency of algorithms and predicting their behavior as the input size grows.&lt;/p&gt;&#xA;&lt;p&gt;An algorithm&amp;rsquo;s performance isn’t measured by timing its execution on a specific machine, as this can&lt;br&gt;&#xA;vary based on hardware and software configurations. Instead, complexity analysis focuses on the&lt;br&gt;&#xA;algorithm’s behavior in terms of the input size, providing a more general understanding of its&lt;br&gt;&#xA;efficiency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Data Structures</title>
      <link>//localhost:1313/docs/data-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/data-structures/</guid>
      <description>&lt;h2 id=&#34;what-are-data-structures&#34;&gt;&lt;strong&gt;What are Data Structures?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;According to Wikipedia,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In computer science, a data structure is a data organization and storage format that is usually&lt;br&gt;&#xA;chosen for efficient access to data.More precisely, a data structure is a collection of data&lt;br&gt;&#xA;values,&lt;br&gt;&#xA;the relationships among them, and the functions or operations that can be applied to the data,&lt;br&gt;&#xA;i.e.,&lt;br&gt;&#xA;it is an algebraic structure about data.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;In Simple words,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A data structure is a way to organize and store data so that it can be accessed and modified&lt;br&gt;&#xA;efficiently.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lists</title>
      <link>//localhost:1313/docs/lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/lists/</guid>
      <description>&lt;h1 id=&#34;lists-in-kotlin&#34;&gt;Lists in Kotlin&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-introduction&#34;&gt;1. &lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Lists are one of the most commonly used data structures in programming. They provide an ordered collection of elements, making it easy to store and retrieve data by maintaining a sequence. Kotlin takes the concept of lists further with a concise and expressive syntax, immutability by default, and extensive support for functional programming.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-overview-of-lists&#34;&gt;2. &lt;strong&gt;Overview of Lists&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;definition-and-purpose&#34;&gt;Definition and Purpose&lt;/h3&gt;&#xA;&lt;p&gt;A &lt;strong&gt;list&lt;/strong&gt; is an ordered collection of elements, where each element can be accessed by its position (index). Lists in Kotlin are part of the &lt;code&gt;kotlin.collections&lt;/code&gt; package and come in two primary flavors:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maps</title>
      <link>//localhost:1313/docs/maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/maps/</guid>
      <description>&lt;h1 id=&#34;maps-in-kotlin&#34;&gt;Maps in Kotlin&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-introduction&#34;&gt;1. &lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Maps are a key collection type in programming, designed to store key-value pairs. Unlike lists or sets, maps allow you to associate a unique key with a specific value, making them invaluable for tasks like indexing, grouping, and quick lookups.&lt;/p&gt;&#xA;&lt;p&gt;In Kotlin, maps are part of the &lt;code&gt;kotlin.collections&lt;/code&gt; package and come with a variety of implementations tailored to different requirements. This post explores Kotlin’s map implementations, their key characteristics, and practical use cases.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Overview</title>
      <link>//localhost:1313/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/overview/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;DSA.kt is not official documentation or a highly formal platform.&lt;br&gt;&#xA;Instead, it’s my personal understanding of Data Structures and Algorithms in the context of Kotlin.&lt;br&gt;&#xA;My goal is to explain what I know and understand in simple terms, making these concepts accessible to everyone.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;a-little-background&#34;&gt;&lt;strong&gt;A Little Background&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;I’m not from a Software Engineering or Computer Science academic background. Tech has always been my passion. Learning programming and software development was a completely &lt;strong&gt;self-taught journey&lt;/strong&gt;, using various online resources.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pair &amp; Triple</title>
      <link>//localhost:1313/docs/pair-triple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/pair-triple/</guid>
      <description>&lt;h1 id=&#34;pairs-and-triples-in-kotlin&#34;&gt;Pairs and Triples in Kotlin&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-introduction&#34;&gt;1. &lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Pairs and Triples are lightweight, immutable data structures in Kotlin, used to store two or three values, respectively. They are part of Kotlin’s standard library and provide a simple way to group related data without creating a custom class.&lt;/p&gt;&#xA;&lt;p&gt;Understanding these structures and their use cases can simplify your code, especially when dealing with operations like returning multiple values from a function or grouping data in collections.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Queues</title>
      <link>//localhost:1313/docs/queues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/queues/</guid>
      <description>&lt;h1 id=&#34;queues-in-kotlin&#34;&gt;Queues in Kotlin&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-introduction&#34;&gt;1. &lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Queues are a foundational data structure in computer science, designed to store and process elements in a specific order. Unlike stacks, queues operate on the &lt;strong&gt;FIFO (First-In, First-Out)&lt;/strong&gt; principle, meaning elements are added at the end and removed from the front.&lt;/p&gt;&#xA;&lt;p&gt;In Kotlin, queues are part of the &lt;code&gt;kotlin.collections&lt;/code&gt; package and come with efficient implementations for different use cases, including &lt;strong&gt;double-ended queues (Deque)&lt;/strong&gt; and linked lists. These implementations provide robust support for both FIFO and LIFO (Last-In, First-Out) operations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sets</title>
      <link>//localhost:1313/docs/sets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/sets/</guid>
      <description>&lt;h1 id=&#34;sets-in-kotlin&#34;&gt;Sets in Kotlin&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-introduction&#34;&gt;1. &lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Sets are a fundamental collection type in programming, designed to store unique elements. Unlike lists, sets do not maintain a specific order and disallow duplicate values, making them ideal for scenarios where uniqueness is essential.&lt;/p&gt;&#xA;&lt;p&gt;In Kotlin, sets are part of the &lt;code&gt;kotlin.collections&lt;/code&gt; package and come with robust features like immutability by default, concise syntax, and extensive support for functional programming.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-overview-of-sets&#34;&gt;2. &lt;strong&gt;Overview of Sets&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;definition-and-purpose&#34;&gt;Definition and Purpose&lt;/h3&gt;&#xA;&lt;p&gt;A &lt;strong&gt;set&lt;/strong&gt; is an unordered collection of unique elements. Kotlin offers two primary types of sets:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stacks</title>
      <link>//localhost:1313/docs/stacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/stacks/</guid>
      <description>&lt;h1 id=&#34;stacks-in-kotlin&#34;&gt;Stacks in Kotlin&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-introduction&#34;&gt;1. &lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Stacks are a fundamental data structure in computer science, characterized by their &lt;strong&gt;LIFO (Last-In, First-Out)&lt;/strong&gt; behavior. This means that the last element added to the stack is the first one to be removed. Stacks are widely used in various computational tasks, including function call management, expression evaluation, and backtracking algorithms.&lt;/p&gt;&#xA;&lt;p&gt;In Kotlin, stacks can be implemented using collections such as &lt;code&gt;ArrayDeque&lt;/code&gt; or &lt;code&gt;LinkedList&lt;/code&gt;. While Kotlin doesn’t provide a dedicated &lt;code&gt;Stack&lt;/code&gt; class, these collections offer all the methods needed to simulate stack behavior efficiently.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Trees</title>
      <link>//localhost:1313/docs/trees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/trees/</guid>
      <description>&lt;h1 id=&#34;trees-in-kotlin&#34;&gt;Trees in Kotlin&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-introduction&#34;&gt;1. &lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Trees are hierarchical data structures widely used in computer science for representing relationships between elements. They consist of nodes connected by edges, with one root node at the top and child nodes forming subtrees below.&lt;/p&gt;&#xA;&lt;p&gt;In Kotlin, trees can be implemented using classes and data structures, providing flexibility to represent various tree types, such as binary trees, binary search trees (BST), and n-ary trees. Understanding trees is crucial for solving problems related to searching, sorting, and hierarchical data representation.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
